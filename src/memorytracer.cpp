/***************************************************************************
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#include "memorytracer.h"
#include <algorithm>
namespace fada{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
MemoryTracer::MemoryTracer()
{
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


MemoryTracer::~MemoryTracer()
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Trace(Expression* __exp)
{
__expressions.insert(__exp);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Trace(Inequation* __ineq)
{
__inequations.insert(__ineq);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Trace(Condition* __cond)
{
__conditions.insert(__cond);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Trace(FADA_Index* __ind)
{
__index.insert(__ind);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Trace(Assignment* __assign)
{
__assignments.insert(__assign);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Free(Expression*__exp)
{
set<Expression*>::iterator it = find(__expressions.begin(), __expressions.end(), __exp); 
if( it == __expressions.end())
   {
   cout<<endl<<"Warning : untraced (expression) memory !!"<<endl;
   return false;
   }
__expressions.erase(it);
return true;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Free(Inequation* __ineq)
{
set<Inequation*>::iterator it = find(__inequations.begin(), __inequations.end(), __ineq); 
if( it == __inequations.end())
   {
   cout<<endl<<"Warning : untraced (inequation) memory !!"<<endl;
   return false;
   }
__inequations.erase(it);
return true;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Free(Condition* __cond)
{
set<Condition*>::iterator it = find(__conditions.begin(), __conditions.end(), __cond); 
if( it == __conditions.end())
   {
   cout<<endl<<"Warning : untraced (condition) memory !!"<<endl;
   return false;
   }
__conditions.erase(it);
return true;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Free(FADA_Index* __ind)
{
set<FADA_Index*>::iterator it = find(__index.begin(), __index.end(), __ind); 
if( it == __index.end())
   {
   cout<<endl<<"Warning : untraced (index) memory !!"<<endl;
   return false;
   }
__index.erase(it);
return true;

}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::Free(Assignment* __assign)
{
set<Assignment*>::iterator it = find(__assignments.begin(), __assignments.end(), __assign); 
if( it == __assignments.end())
   {
   cout<<endl<<"Warning : untraced (condition) memory !!"<<endl;
   return false;
   }
__assignments.erase(it);
return true;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int
MemoryTracer::FreeAll()
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}



