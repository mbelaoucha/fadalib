#ifndef lint
static const char yysccsid[] = "@(#)yaccpar   1.9 (Berkeley) 02/21/93";
#endif

#include <stdlib.h>
#include <string.h>

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20070509

#define YYEMPTY (-1)
#define yyclearin    (yychar = YYEMPTY)
#define yyerrok      (yyerrflag = 0)
#define YYRECOVERING (yyerrflag != 0)

extern int yyparse(void);

static int yygrowstack(void);
#define YYPREFIX "yy"
#line 2 "ADaAn_Parser.y"

#include <string.h>   /* for strcmp, strdup & friends */
#include <stdio.h>   /* for strcmp, strdup & friends */
#include <stdlib.h>   /* for atoi() */

/*bool      Parse_Program(char* filename, Program* adaan_prog);*/

#include <fada.h>


using namespace fada;
Program*         __prog;


int      nb_while_loops;

#define PARSE_EXPRESSION 100
#define PARSE_INEQUATION 1000
#define PARSE_CONDITION 2000
#define __TYPE_DEF    -512

#define __IS_TYPE_DEF  $<info.__Value>$ = -512;
#define __IS_NOT_TYPE_DEF  $<info.__Value>$ = -511;
#define __HAS_TYPE_DEF

extern char*    yytext;
extern FILE*    yyin;
bool      syntaxic_error;
extern int    parser_line;
extern int    parser_col;
bool      Parse_Program(char* filename, Program* adaan_prog);
int (*fct)(char*);

bool __look_for_type;
list<bool>   look_for_type;
void   push(bool val)   {look_for_type.insert(look_for_type.begin(),val);}
void   pop()      {look_for_type.erase(look_for_type.begin());}
bool   get_header()   {return *look_for_type.begin();}

extern bool fada::IsType(std::string);
extern void fada::PrintAllTypes();
extern void fada::InitTypes();


int   IsDefinedType(char* ch){

return    IsType((char*)ch);
}


struct
   {
      char   __ID[200];
      int    __Value;
      void*   __generic;
   } INFOS;

/* typedef INFOS infos;*/

extern "C"
{
/*        int yyparse(void);*/
        int yylex(void);  

   int yyerror(char *s) 
      {
      /*PrintAllTypes();*/
      printf("\n\nsyntax error \"%s\" :line ='%d'  column = '%d' current token = : '%s' \n",s,parser_line, parser_col,yytext);
      syntaxic_error=true;
      };
}




#line 80 "ADaAn_Parser.y"
typedef union   {
   /*infos info;*/
   struct   {
      char   __ID[200];
      int    __Value;
      void*   __generic;
      }info;
   } YYSTYPE;
#line 108 "ADaAn_Parser.cc"
#define IDENTIFIER 257
#define CONSTANT 258
#define STRING_LITERAL 259
#define SIZEOF 260
#define PTR_OP 261
#define INC_OP 262
#define DEC_OP 263
#define LEFT_OP 264
#define RIGHT_OP 265
#define MUL_ASSIGN 266
#define DIV_ASSIGN 267
#define MOD_ASSIGN 268
#define ADD_ASSIGN 269
#define SUB_ASSIGN 270
#define LEFT_ASSIGN 271
#define RIGHT_ASSIGN 272
#define AND_ASSIGN 273
#define XOR_ASSIGN 274
#define OR_ASSIGN 275
#define TYPE_NAME 276
#define TYPEDEF 277
#define EXTERN 278
#define STATIC 279
#define AUTO 280
#define REGISTER 281
#define INLINE 282
#define RESTRICT 283
#define CHAR 284
#define SHORT 285
#define INT 286
#define LONG 287
#define SIGNED 288
#define UNSIGNED 289
#define FLOAT 290
#define DOUBLE 291
#define CONST 292
#define VOLATILE 293
#define VOID 294
#define BOOL 295
#define COMPLEX 296
#define IMAGINARY 297
#define STRUCT 298
#define UNION 299
#define ENUM 300
#define ELLIPSIS 301
#define CASE 302
#define DEFAULT 303
#define IF 304
#define ELSE 305
#define SWITCH 306
#define WHILE 307
#define DO 308
#define FOR 309
#define GOTO 310
#define CONTINUE 311
#define BREAK 312
#define RETURN 313
#define OR_OP 314
#define AND_OP 315
#define LE_OP 316
#define GE_OP 317
#define EQ_OP 318
#define NE_OP 319
#define NEGATION 320
#define __TRUE 321
#define __FALSE 322
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    5,    5,    8,    8,    8,    8,
    8,    8,    9,    9,    9,    9,    9,    9,   10,   10,
   11,   11,   11,   11,   12,   12,   12,    4,    4,    4,
   13,   13,   13,   13,   13,   14,   14,   14,   15,   15,
   16,   16,   17,   17,   18,   18,   19,   19,   20,   20,
   21,   21,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,    2,    2,   23,   24,   24,   25,   25,
   25,   25,   25,   25,   25,   25,   26,   26,   31,   31,
   27,   27,   27,   27,   27,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   34,   34,   34,   34,   36,   36,   37,   37,   38,   38,
   39,   39,   39,   39,   40,   40,   41,   41,   41,   35,
   35,   35,   35,   35,   42,   42,   43,   43,   29,   29,
   29,   30,   32,   32,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   44,   44,   44,
   44,   46,   46,   47,   47,   49,   49,   50,   50,   50,
   48,   48,    6,    6,   51,   51,   51,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   33,   33,
   33,    7,    7,    7,    7,   53,   54,   54,   55,   55,
   56,   56,   56,   56,   56,   56,   57,   57,   57,   58,
   58,   63,   63,   64,   64,   59,   59,   60,   60,   60,
   61,   61,   61,   61,   61,   61,   62,   62,   62,   62,
   62,    0,    0,   65,   65,   67,   67,   68,   68,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   70,   70,   71,   71,   72,   72,   72,   72,   72,   72,
   72,   72,   73,   73,   73,   73,   73,   73,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
   75,   76,   76,   77,   77,   77,   77,   77,   77,   78,
   82,   82,   79,   80,   81,   81,   83,   83,   66,   66,
};
short yylen[] = {                                         2,
    1,    1,    1,    3,    1,    4,    3,    4,    3,    3,
    2,    2,    6,    7,    1,    3,    1,    2,    2,    2,
    2,    4,    1,    1,    1,    1,    1,    1,    1,    4,
    1,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    1,    3,    3,    3,    3,    1,    3,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    5,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    1,    2,    3,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    3,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    5,    4,    2,    2,    1,    1,    1,    2,    3,    2,
    2,    1,    2,    1,    1,    3,    1,    2,    3,    4,
    5,    5,    6,    2,    1,    3,    1,    3,    1,    1,
    1,    1,    2,    1,    1,    3,    5,    4,    4,    6,
    6,    5,    4,    3,    4,    4,    3,    1,    2,    2,
    3,    1,    2,    1,    3,    1,    3,    2,    2,    1,
    1,    3,    1,    2,    1,    1,    2,    3,    2,    3,
    3,    4,    3,    4,    2,    3,    3,    4,    1,    3,
    4,    1,    2,    3,    4,    2,    1,    2,    3,    2,
    1,    1,    1,    1,    1,    1,    3,    4,    3,    2,
    3,    1,    2,    1,    1,    1,    2,    5,    7,    5,
    5,    7,    6,    7,    6,    7,    3,    2,    2,    2,
    3,    1,    2,    1,    1,    4,    3,    1,    2,    3,
    3,    3,    3,    2,    3,    4,    3,    2,    1,    1,
    1,    3,    3,    4,    3,    3,    3,    3,    3,    3,
    1,    1,    1,    3,    3,    2,    3,    1,    1,    2,
    3,    3,    3,    3,    3,    2,    2,    2,    2,    4,
    4,    4,    4,    3,    3,    3,    3,    4,    5,    3,
    1,    2,    1,    4,    2,    1,    1,    1,    1,    6,
    0,    2,    5,    9,    4,    3,    0,    2,    4,    3,
};
short yydefred[] = {                                      0,
  110,   91,   92,   93,   94,   95,  142,  140,   97,   98,
   99,  100,  103,  104,  101,  102,  139,  141,   96,  105,
  106,  107,  115,  116,    0,    0,  235,    0,    0,    0,
    0,    0,  108,  109,    0,  232,  234,    0,    0,  233,
  145,    0,    0,   77,    0,   87,    0,    0,    0,   80,
   82,   84,   86,    0,  114,    0,    0,    0,    0,  135,
  162,  160,    0,    0,    0,   78,    0,    0,  238,    0,
    0,  310,    0,    0,    0,    0,    0,    0,    0,  117,
    0,    0,    0,  130,    0,  163,  161,  146,   88,    0,
    0,    0,    1,    2,    3,    0,    0,    0,   28,   25,
   26,   24,    0,    0,   23,   27,    5,    0,    0,    0,
    0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,  189,   90,  239,  309,  171,  157,    0,    0,
    0,    0,  166,    0,    0,  154,    0,    0,    0,  121,
  123,  112,  118,    0,  120,    0,    0,  125,  131,    0,
   29,   76,  138,  132,  136,    0,    0,  250,    0,    0,
    0,    0,    0,    0,    0,    0,  306,    0,    0,  308,
  296,  297,  298,  299,    0,   21,    0,   18,   19,    0,
    0,   74,    0,    0,    0,    0,  192,    0,    0,  197,
    0,   11,   12,    0,    0,    0,    0,    0,   64,   65,
   66,   67,   68,   69,   70,   71,   72,   73,   63,    0,
   20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  168,    0,  169,    0,  155,  156,    0,    0,    0,  153,
  149,    0,    0,  148,    0,  111,  128,    0,    0,  119,
  133,  305,  276,  278,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  244,    0,    0,    0,  291,    0,    0,    0,    0,
  295,    0,    0,    4,    0,    0,    0,    0,  174,    0,
  200,  190,    0,  193,  196,  198,   10,    7,    0,    0,
    0,    9,    0,    0,   62,   32,   33,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  185,    0,    0,    0,  179,    0,    0,    0,
    0,  172,  165,  167,    0,    0,  152,  147,  129,  126,
    0,    0,    0,    0,  247,    0,    0,    0,    0,    0,
    0,  284,  285,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  261,  262,    0,    0,  263,    0,    0,    0,
    0,    0,  245,    0,    0,    0,    0,  242,  243,    0,
    0,   75,    0,   30,  199,  191,  194,    0,    8,    0,
    6,    0,  186,  178,  183,  180,  187,    0,    0,  181,
    0,  150,  151,  246,    0,  253,  294,    0,    0,    0,
    0,    0,    0,  266,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  290,
    0,  195,    0,   60,  188,  184,  182,    0,  254,  267,
    0,    0,    0,    0,    0,    0,    0,  265,    0,  303,
    0,    0,    0,    0,   13,    0,    0,  300,    0,   14,
  302,    0,    0,  304,
};
short yydgoto[] = {                                      26,
  107,  180,  108,  109,  300,  181,  186,  151,  111,  112,
  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
  123,  210,  153,   27,  129,   45,   29,   30,   31,   32,
   46,   64,  187,   33,   34,   35,   79,   80,   81,  147,
  148,   59,   60,   48,   49,   63,  324,  131,  132,  133,
  325,  234,  188,  189,  190,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,   37,    0,   71,  168,  347,
  263,  367,  368,  169,  275,  276,  170,  171,  172,  173,
  174,  458,   92,
};
short yysindex[] = {                                   2116,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -92, 2116,    0,    9, 2116, 2116,
 2116, 2116,    0,    0,  -41,    0,    0, -110,  -91,    0,
    0,  -23,  116,    0,  339,    0, 1750,  -26,   46,    0,
    0,    0,    0,   66,    0, 2141,  -91,  115,  -11,    0,
    0,    0,  -23,  183,  116,    0, 2116, 1133,    0,    9,
 1970,    0,   46, 1416, 1460, 2141, 2141, 2141, 2020,    0,
   17,   11, 1929,    0,  -88,    0,    0,    0,    0,  215,
 2116,  788,    0,    0,    0, 1944, 1979, 1979,    0,    0,
    0,    0, 1072, 1867,    0,    0,    0,   10,  122, 1526,
 1929,    0,  621,  368,   -8, -121,  285,  236,  254,   77,
  -55,    0,    0,    0,    0,    0,    0,    0,   43,  391,
  234,  419,    0,  318,  362,    0,  382, 1550, 2065,    0,
    0,    0,    0, 1929,    0,  433,  423,    0,    0,  -61,
    0,    0,    0,    0,    0,  831, 1905,    0,  270,  275,
  500,  523,  525,  119,  119,  178,    0,  934,  517,    0,
    0,    0,    0,    0, 1072,    0, 1072,    0,    0,  442,
  541,    0,    6, 1929,  335,   14,    0, 1133,  349,    0,
  348,    0,    0, 1561, 1929,  350, 1929, 1929,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1929,
    0, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929,
 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1251, 1746,
    0,  -14,    0,  123,    0,    0,  377, 2090, 1391,    0,
    0, 1929,  547,    0,  552,    0,    0, 1929,   91,    0,
    0,    0,    0,    0,  119,  119,  119,  119,  189,  119,
  404,  119, 1371,  561,  561,  -30,  -30,  404,  151,  119,
  934,    0,  151, 1269,  529,    0,  119,  119,  119,  119,
    0,  618,  628,    0, 1929, 1884, 1282,  167,    0,  577,
    0,    0, 1263,    0,    0,    0,    0,    0,  122,  530,
  -32,    0,  368,  368,    0,    0,    0,    0,  621,  621,
  122,  122,  122,  122,   -8,   -8, -121,  285,  236,  254,
   77,   35,    0,  630,  642,  591,    0,  598,  123, 1478,
 1892,    0,    0,    0,  599,  607,    0,    0,    0,    0,
  934,  934,  934,  934,    0,  934,  578,  882, 1962,  646,
  934,    0,    0,  119,  119,  119,  119,  119,  119,  610,
  610,  -30,    0,    0,  -30,  108,    0,  -35,   67,  647,
  610,  610,    0,  663,  450,  300,  300,    0,    0,  603,
  603,    0, 1867,    0,    0,    0,    0, 1133,    0, 1929,
    0, 1929,    0,    0,    0,    0,    0,  689,  638,    0,
  644,    0,    0,    0,  119,    0,    0,  934,  934,  934,
  934, 1066,  934,    0,   53,   70,  119,  119,  119,  119,
  119,  119,  -30,  -30,  933,  933,  -36,  119,  561,    0,
   36,    0,  122,    0,    0,    0,    0,  934,    0,    0,
  934,  934,  934,  934,  934,  934,  427,    0,  447,    0,
  108,  679,  934,  610,    0, 1691,  933,    0,  404,    0,
    0,  702,  933,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   25,  562,
 1062, 1203,    0,    0,    0,    0,    0, 1123,    0,    0,
    0,   47,    0,    0,    0,    0,  497,    0, 1568,    0,
    0,    0,    0, 1192,    0,    0,    0,   58,    0,    0,
    0,    0,  171,    0,    0,    0,  870,    0,    0,    0,
    0,    0, 1598,    0,    0,    0, 1028, 1573,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  497,
  870,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -20,  430,  143,
    0,    0,  269,  243,  443,  738,  815,  901,  911,  974,
  823,    0,    0,    0,    0,    0,    0,    0,  636,    0,
    0,  719,    0,    0, 2031,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  520,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  680,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  658,    0,  674,    0,    0,    0,    0,    0,    0,
    0,    0, 2031,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1222,  113,  179,    0,    0,    0,  571,    0,
  198,    0,  997,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  728,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  675,    0,
    0,    0,  379,  456,    0,    0,    0,    0,  281,  371,
  531,  579,  588,  616,  484,  670,  776,  878,  903,  924,
 1014,    0,    0,    0,    0, 2031,    0,    0,  715,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  224,  407,  410,  411,    0,  737,    0,    0, 1454,    0,
  439,    0,    0,    0,    0,    0,    0,    0,    0,  458,
  471,    0,    0,    0,    0,   76,    0,    0,    0,    0,
  745, 1104,    0,    0,    0,  691,  765,    0,    0,   85,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2031,    0,
    0,    0,    0,    0,    0,    0,    0,  472,  479,  480,
  485,    0,  494,    0,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  771,    0,
    0,    0,  772,    0,    0,    0,    0,  777,    0,    0,
  -25,    3,   19,   31,   51,   65,  -21,    0,  898,    0,
    0,    0,  507,  782,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    0,  549,    0,  259,    0,  268,  400,  -68,    0,  554,
  295,  354,  406,  568,  569,  560,  574,  584,    0,  -81,
 1731,    0,    8,  438, 2089,    0,    0, 1922, 2106,    0,
  757,  112,  -67,    0,    0,    0,  753,    2,  677,    0,
  581,  779,  -38,  -10,  -37,   60,  -69,    0,    0,  604,
  -84,  -75, -281,    0,  648,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  817,    0,    0,  774, 1020,    0,
  -65,  417,  -27, -143,    0,  476,   -7,    0,    0,    0,
  217,    0,  762,
};
#define YYTABLESIZE 2441
short yytable[] = {                                     110,
  124,  152,  362,  270,  130,  425,  110,  228,  165,  365,
   73,  388,   57,   43,  165,  258,   17,   17,   42,  264,
   17,   17,   17,   17,   17,  229,   17,  176,  178,  179,
   39,   62,   85,  258,  110,  110,  154,   17,   17,   17,
   17,   17,   17,  259,  233,  287,  155,   42,   43,  194,
   42,  217,   87,  218,  150,  196,   43,  293,   42,  257,
  391,  259,  152,  251,   79,   79,   79,   44,   79,  110,
  269,  256,   17,   17,  144,  145,  230,  257,  285,  456,
  143,   56,  229,   79,   42,   74,  158,  158,  269,  256,
  158,  255,  392,  373,  279,  277,  230,  278,  289,  280,
  195,  137,  152,   17,   17,  260,  110,  426,  110,  255,
  440,  155,  417,   84,  418,   79,  268,  350,  232,  110,
  294,   22,   22,  260,  370,   22,   22,   22,   22,   22,
   43,   22,   42,  230,  138,  149,   75,  158,  292,   47,
  143,  110,   22,   22,   22,   22,   22,   22,  144,  279,
  277,  247,  278,  277,  280,   43,  329,   42,  270,  110,
  455,  110,  330,  165,   38,   58,  152,  417,   58,  418,
  110,  277,  288,  110,  388,   83,   90,   22,   22,   29,
   29,   90,  137,   29,   29,   29,   29,   29,   76,   29,
  259,  290,  146,  239,   73,   58,  221,  222,  360,  361,
   29,   29,   29,  371,   29,   29,  287,  372,   22,   22,
  159,  159,  329,  331,  159,   54,  110,  270,  232,  279,
  269,  158,  165,   88,  110,  387,  269,  158,  270,  345,
   41,  197,  198,  165,   55,   29,   29,  279,  270,  369,
  231,  260,   41,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,  339,  270,  230,  227,    8,
  398,  159,  110,   72,  275,   41,   29,   29,   17,   18,
  191,  192,  193,   41,  236,   68,  288,  237,  423,  424,
   38,   79,  275,   38,  363,  364,   38,  126,  258,  258,
  363,  364,  264,   17,   17,   17,   17,   17,   17,   41,
   38,   38,   38,  158,   38,   38,   35,  219,  220,   35,
  434,   35,   35,   35,  110,  462,  259,  259,   36,  110,
  432,   36,  223,   36,   36,   36,   35,   35,   35,  224,
   35,   35,  257,  257,  414,   38,   38,  416,   36,   36,
   36,  279,   36,   36,  256,  256,  280,   41,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
  146,   35,   35,  454,  255,  255,   38,   38,  419,  420,
  421,  422,   41,   36,   36,  269,  158,  225,  260,  260,
  423,  424,   65,  423,  424,  197,  198,  110,  387,  268,
  268,  226,   35,   35,  185,  447,  448,   66,   22,   22,
   22,   22,   22,   22,   36,   36,   29,   29,   37,  295,
  215,   37,  216,   37,   37,   37,   39,  449,  450,   39,
  268,  268,   39,  419,  420,  421,  422,  159,   37,   37,
   37,  235,   37,   37,  273,  158,   39,   39,   39,  184,
   39,   39,  282,  166,  283,  269,  158,  274,  165,  461,
  272,  273,  299,  301,  240,  464,   29,   29,   29,   29,
   29,   29,  238,   37,   37,  274,  249,   41,  272,  273,
   41,   39,   39,   41,  241,  311,  312,  313,  314,  271,
   46,  250,  284,   46,   69,  285,   46,   41,   41,   41,
  248,   41,   41,   40,   37,   37,   40,  271,  287,   40,
   46,   46,   39,   39,   69,   46,   38,   38,  125,  309,
  310,  286,  283,   40,   40,   40,  287,   40,   40,  282,
  280,   47,   41,   41,   47,  281,  264,   47,  125,  286,
  283,  265,   35,   35,  288,   46,   46,  282,  280,  266,
   89,   47,   47,  281,   36,   36,   47,  289,   40,   40,
  303,  304,  288,   41,   41,   89,   38,   38,   38,   38,
   38,   38,  267,  127,  268,  289,   46,   46,   42,  374,
  389,   42,  375,  390,   42,  281,   47,   47,  127,   40,
   40,  286,   35,   35,   35,   35,   35,   35,   42,   42,
   42,  291,   42,   42,   36,   36,   36,   36,   36,   36,
    8,   81,   81,   81,  297,   81,  302,   47,   47,   17,
   18,  249,  249,  249,  249,  249,   43,  249,  404,   43,
   81,  405,   43,   42,   42,   44,  315,  316,   44,  249,
  249,   44,  249,  332,   37,   37,   43,   43,   43,  337,
   43,   43,   39,   39,  338,   44,   44,   44,  433,   44,
   44,  260,   81,   45,   42,   42,   45,  214,  380,   45,
  349,  158,  212,  249,  211,  159,  160,  213,  381,  385,
  393,   43,   43,   45,   45,   45,  170,   45,   45,  170,
   44,   44,  394,  395,   37,   37,   37,   37,   37,   37,
  396,  402,   39,   39,   39,   39,   39,   39,  175,  403,
  358,  175,   43,   43,  407,  427,  429,   48,   45,   45,
   48,   44,   44,   48,  176,   15,  164,  176,   15,   40,
   40,  249,  249,  428,  249,  383,  249,   48,   48,  435,
  436,  240,   48,  240,  240,  240,  437,  459,  249,   45,
   45,  424,  463,   41,   41,   41,   41,   41,   41,  240,
  240,  457,  240,  140,  141,  177,   46,   46,  177,  164,
   46,   46,   48,   48,  173,  306,  307,  308,  175,   40,
   40,   40,   40,   40,   40,   49,  322,  251,   49,  183,
  251,   49,  431,  240,  319,  248,  248,  248,  248,  248,
  317,  248,  318,   48,   48,   49,   49,   47,   47,  320,
   49,   47,   47,  248,  248,  241,  248,  241,  241,  241,
  321,  293,   16,   50,  293,   16,   50,  252,   81,   50,
  252,   89,  292,  241,  241,  292,  241,  166,  139,  340,
   49,   49,  165,   50,   50,   82,  296,  248,   50,  384,
   91,  334,   40,  452,   42,   42,   42,   42,   42,   42,
  430,  183,  156,  183,    0,   51,    0,  241,   51,    0,
    0,   49,   49,   59,    0,    0,   59,    0,   50,   50,
  166,    0,   51,   51,    0,  165,    0,   51,    0,    0,
   59,   59,    0,    0,  249,  249,  249,  249,  249,  249,
    0,    0,   43,   43,   43,   43,   43,   43,    0,   50,
   50,   44,   44,   44,   44,   44,   44,   51,   51,  307,
   67,    0,  167,    0,  307,   59,    0,    0,   52,    0,
    0,   52,    0,  279,  277,    0,  278,    0,  280,   45,
   45,   45,   45,   45,   45,   52,   52,  301,   51,   51,
   52,   53,  301,   54,   53,    0,   54,   59,    0,    0,
    0,   55,    0,   67,   55,  252,    0,    0,   53,   53,
   54,   54,    0,   53,   56,   54,    0,   56,   55,   55,
   52,   52,  166,   55,  406,  279,  277,  165,  278,    0,
  280,   56,   56,   48,   48,    0,   56,   48,   48,    0,
    0,    0,  307,   53,  307,   54,    0,    0,    0,    0,
    0,   52,   52,   55,  240,  240,  240,  240,  240,  240,
    0,    0,    0,    0,   57,    0,   56,   57,    0,    0,
  301,    0,  301,    0,   53,   53,   54,   54,    0,    0,
    0,   57,   57,    0,    0,   55,   57,  249,  249,  249,
  293,  249,    0,  249,  157,  158,    0,    0,   56,  159,
  160,   49,   49,    0,   58,   67,    0,   58,  248,  248,
  248,  248,  248,  248,    0,    0,   57,  122,  122,  122,
    0,   58,   58,    0,    0,    0,   58,    0,  241,  241,
  241,  241,  241,  241,    0,  122,  122,  157,  158,   50,
   50,  161,  159,  160,  162,    0,  163,    0,   57,    0,
  164,   83,   83,   83,   99,   83,   58,  279,  277,  105,
  278,  103,  280,  102,  100,    0,  101,    0,  122,    0,
   83,    0,    0,    0,    0,    0,  307,  307,   51,   51,
    0,  307,  307,    0,  161,    0,    0,  162,   58,  163,
    0,    0,    0,  164,  248,  248,  248,  292,  248,    0,
  248,    0,   83,    0,  301,  301,    0,    0,  439,  301,
  301,    0,  134,  134,  134,   99,  134,    0,    0,    0,
  105,    0,  103,  307,  102,  100,  307,  101,  307,    0,
  134,  134,  307,  271,  272,  274,    0,    0,    0,  157,
  158,   52,   52,    0,  159,  160,    0,  106,    0,    0,
    0,  301,    0,    0,  301,    0,  301,    0,    0,    0,
  301,    0,    0,  134,   53,   53,   54,   54,    0,    0,
    0,    0,    0,    0,   55,   55,    0,    0,    0,    0,
    0,  113,  113,  113,    0,  113,  161,   56,   56,  162,
    0,  163,   85,   85,   85,  164,   85,    0,    0,  113,
  113,    0,    0,    0,    0,  104,    0,    0,  106,    0,
    0,   85,  248,  248,  248,    0,  248,    0,  248,    0,
    0,    0,    0,    0,  341,  342,  343,  344,  346,  348,
  248,  351,  113,    0,  122,  366,  366,   57,    0,  274,
  229,  323,   42,   85,    0,   99,  376,  377,  378,  379,
  105,    0,  103,    0,  102,  100,    0,  101,  185,  373,
  279,  277,    0,  278,    0,  280,    0,    0,   83,    0,
    0,  287,  323,   42,    0,    0,    0,   58,   93,   94,
   95,   96,    0,   97,   98,    0,    0,    0,    0,    0,
    0,  230,    0,    0,    0,    0,    0,    1,    0,    0,
    0,    0,    0,  184,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  230,  408,  409,  410,  411,  412,  413,  134,
    0,  366,    0,    0,  415,  104,    0,  386,  106,   93,
   94,   95,   96,    0,   97,   98,    0,    0,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  134,  134,   99,  438,    0,    0,    0,  105,    0,
  103,  359,  102,  100,    0,  101,  441,  442,  443,  444,
  445,  446,  366,  366,    0,    0,  451,  453,  113,    0,
    0,    0,    0,    0,    0,    0,  128,    0,    0,   85,
    0,  358,    0,    0,    0,    0,    0,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  113,   99,    0,  249,  249,  249,  105,  249,  103,
  249,  135,  100,    0,  101,    0,    0,   41,    0,    0,
    0,    0,  249,    0,    0,    0,  106,    0,  397,   93,
   94,   95,   96,    0,   97,   98,    1,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
   25,    0,  136,    0,    0,    0,    0,    1,    2,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   99,    0,    0,  106,  209,  105,    0,  103,
    0,  243,  100,   99,  101,    0,    0,    0,  105,    0,
  103,  298,  102,  100,    0,  101,    0,    0,  144,    0,
    0,  144,  124,  124,  124,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,  144,    0,  144,    0,
  124,  124,  352,  353,    0,    0,  354,  355,  143,  356,
  357,  143,  244,    0,    0,    0,    0,   93,   94,   95,
   96,    0,   97,   98,    0,  143,  143,    0,  143,    0,
    0,    0,    0,  124,    0,    0,    0,    0,    0,    0,
    0,    0,  127,    8,    0,  106,    0,    0,    0,    0,
    0,    0,   17,   18,    0,    0,  106,    0,    0,    0,
  144,    1,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,   93,   94,   95,   96,
  143,   97,   98,   99,    0,    0,    0,    0,  105,    0,
  103,    0,  102,  100,    0,  101,  185,    0,  134,    0,
    0,    0,    8,    0,    0,    0,    0,    0,    0,    0,
    0,   17,   18,    1,    2,    3,    4,    5,    6,    7,
    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,   21,   22,   23,   24,   25,   99,    0,
    0,  184,    0,  105,    0,  103,    0,  326,  100,    0,
  101,  199,  200,  201,  202,  203,  204,  205,  206,  207,
  208,    0,    0,    0,    0,  137,   93,   94,   95,   96,
   68,   97,   98,  104,    0,  460,  106,   93,   94,   95,
   96,    0,   97,   98,    0,    0,    0,    0,  242,  124,
    0,    0,    8,  182,    0,    0,    0,    0,  327,    0,
    0,   17,   18,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
  144,  144,  144,  144,  144,  144,  144,  144,  245,    0,
    0,  106,   67,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
  143,  143,  143,  143,  143,  143,  143,  143,    0,   99,
    0,    0,    0,    0,  105,  182,  103,  182,  102,  100,
    0,  101,  185,    0,    0,    0,   99,    0,    0,    0,
    0,  105,    0,  103,   99,  102,  100,    0,  101,  105,
    0,  103,    0,  399,  100,    0,  101,    0,    0,    0,
  305,    0,    0,    0,  259,    0,    0,   93,   94,   95,
   96,    0,   97,   98,    0,    0,    0,  184,  182,    0,
  328,   99,  261,    0,    0,  262,  105,    0,  103,  335,
  102,  100,  336,  101,    0,    0,   99,   77,    0,    0,
    0,  105,    0,  175,  400,  102,  100,    0,  101,  104,
    0,    0,  106,    0,    0,  260,    0,   77,   77,   77,
   77,  259,   93,   94,   95,   96,  383,   97,   98,  106,
    0,   99,    0,    0,    0,  382,  105,  106,  177,    0,
  102,  100,  262,  101,   77,    1,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
    0,    0,  260,    0,  106,    0,    0,    0,    0,    0,
   77,  401,    0,   24,    0,    0,    0,    0,   24,  106,
   24,    0,   24,   24,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
    0,    0,   67,    0,    0,    0,   77,    0,   77,    0,
    0,    0,    0,    0,  106,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,    0,   50,   51,   52,
   53,    0,    0,   93,   94,   95,   96,    0,   97,   98,
    0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
   93,   94,   95,   96,  142,   97,   98,   61,   93,   94,
   95,   96,    0,   97,   98,   70,   24,    0,    0,   70,
    0,   78,    0,    0,    0,    0,  253,  254,   86,    0,
  255,  256,    0,  257,  258,    0,    0,    0,    0,   70,
   61,   78,   78,   78,   78,   93,   94,   95,   96,  246,
   97,   98,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   94,   95,   96,    0,   97,   98,    0,   78,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  253,  254,    0,    0,  255,  256,    0,
  257,  258,    0,    0,    0,   93,   94,   95,   96,   61,
   97,   98,    0,   86,   78,    1,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   78,    0,   78,    0,    0,    0,    0,   24,   24,   24,
   24,    0,   24,   24,    0,    1,    0,    0,    0,    0,
    0,    0,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    0,    0,    0,   86,    0,    0,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,   22,   23,   24,   25,    1,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
  333,    1,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   23,   24,   25,    1,    0,    0,    0,
    0,    0,    0,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
   25,
};
short yycheck[] = {                                      68,
   68,   83,   33,   40,   74,   41,   75,   63,   45,   40,
   48,  293,  123,   40,   45,   41,   37,   38,   42,   41,
   41,   42,   43,   44,   45,   40,   47,   96,   97,   98,
  123,   42,   44,   59,  103,  104,  125,   58,   59,   60,
   61,   62,   63,   41,  129,   40,   85,   42,   40,   40,
   42,   60,   63,   62,   44,   46,   40,   44,   42,   41,
   93,   59,  144,  125,   40,   41,   42,   59,   44,  138,
   41,   41,   93,   94,   58,   59,   91,   59,   44,   44,
   79,  123,   40,   59,   42,   40,   40,   41,   59,   59,
   44,   41,   58,   41,   42,   43,   91,   45,  183,   47,
   91,   44,  184,  124,  125,   41,  175,   41,  177,   59,
   41,  150,   60,  125,   62,   91,   41,  261,  129,  188,
  188,   37,   38,   59,  268,   41,   42,   43,   44,   45,
   40,   47,   42,   91,   75,  125,   91,   91,  125,   28,
  139,  210,   58,   59,   60,   61,   62,   63,   58,   42,
   43,  144,   45,   41,   47,   40,  232,   42,   40,  228,
  125,  230,   40,   45,  257,  257,  248,   60,  257,   62,
  239,   59,  183,  242,  456,   61,   65,   93,   94,   37,
   38,   70,  125,   41,   42,   43,   44,   45,  123,   47,
   40,  184,   81,  134,  232,  257,  318,  319,  264,  265,
   58,   59,   60,  269,   62,   63,   40,  273,  124,  125,
   40,   41,  288,   91,   44,  257,  285,   40,  229,   41,
  257,  258,   45,   41,  293,  293,  257,  258,   40,   41,
  257,  264,  265,   45,  276,   93,   94,   59,   41,  267,
  129,   91,  257,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  248,   59,   91,  314,  283,
  330,   91,  331,   47,   41,  257,  124,  125,  292,  293,
  261,  262,  263,  257,   41,   61,  287,   44,  314,  315,
   38,  257,   59,   41,  321,  322,   44,   71,  314,  315,
  321,  322,  314,  314,  315,  316,  317,  318,  319,  257,
   58,   59,   60,  257,   62,   63,   38,  316,  317,   41,
  392,   43,   44,   45,  383,  459,  314,  315,   38,  388,
  388,   41,   38,   43,   44,   45,   58,   59,   60,   94,
   62,   63,  314,  315,  362,   93,   94,  365,   58,   59,
   60,   42,   62,   63,  314,  315,   47,  257,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  249,   93,   94,  429,  314,  315,  124,  125,  316,  317,
  318,  319,  257,   93,   94,  257,  258,  124,  314,  315,
  314,  315,   44,  314,  315,  264,  265,  456,  456,  314,
  315,  315,  124,  125,   46,  423,  424,   59,  314,  315,
  316,  317,  318,  319,  124,  125,  264,  265,   38,   61,
   43,   41,   45,   43,   44,   45,   38,  425,  426,   41,
  314,  315,   44,  316,  317,  318,  319,  257,   58,   59,
   60,   41,   62,   63,  257,  258,   58,   59,   60,   91,
   62,   63,  175,   40,  177,  257,  258,   41,   45,  457,
   41,   41,  194,  195,   93,  463,  314,  315,  316,  317,
  318,  319,   44,   93,   94,   59,   44,   38,   59,   59,
   41,   93,   94,   44,   93,  217,  218,  219,  220,   41,
   38,   59,   41,   41,   47,   44,   44,   58,   59,   60,
   58,   62,   63,   38,  124,  125,   41,   59,   41,   44,
   58,   59,  124,  125,   67,   63,  264,  265,   71,  215,
  216,   41,   41,   58,   59,   60,   59,   62,   63,   41,
   41,   38,   93,   94,   41,   41,  257,   44,   91,   59,
   59,  257,  264,  265,   41,   93,   94,   59,   59,   40,
   44,   58,   59,   59,  264,  265,   63,   41,   93,   94,
  197,  198,   59,  124,  125,   59,  314,  315,  316,  317,
  318,  319,   40,   44,   40,   59,  124,  125,   38,   41,
   41,   41,   44,   44,   44,   59,   93,   94,   59,  124,
  125,   41,  314,  315,  316,  317,  318,  319,   58,   59,
   60,  257,   62,   63,  314,  315,  316,  317,  318,  319,
  283,   40,   41,   42,  257,   44,  257,  124,  125,  292,
  293,   41,   42,   43,   44,   45,   38,   47,   41,   41,
   59,   44,   44,   93,   94,   38,  221,  222,   41,   59,
   60,   44,   62,  257,  264,  265,   58,   59,   60,   93,
   62,   63,  264,  265,   93,   58,   59,   60,  390,   62,
   63,   91,   91,   38,  124,  125,   41,   37,   41,   44,
  257,  258,   42,   93,  111,  262,  263,   47,   41,   93,
   41,   93,   94,   58,   59,   60,   41,   62,   63,   44,
   93,   94,   41,   93,  314,  315,  316,  317,  318,  319,
   93,   93,  314,  315,  316,  317,  318,  319,   41,   93,
   91,   44,  124,  125,   59,   59,  257,   38,   93,   94,
   41,  124,  125,   44,   41,   41,  313,   44,   44,  264,
  265,   42,   43,   61,   45,  123,   47,   58,   59,   41,
   93,   41,   63,   43,   44,   45,   93,   59,   59,  124,
  125,  315,   41,  314,  315,  316,  317,  318,  319,   59,
   60,  305,   62,   77,   78,   41,  314,  315,   44,   41,
  318,  319,   93,   94,   41,  212,  213,  214,   41,  314,
  315,  316,  317,  318,  319,   38,  228,   41,   41,  103,
   44,   44,  383,   93,  225,   41,   42,   43,   44,   45,
  223,   47,  224,  124,  125,   58,   59,  314,  315,  226,
   63,  318,  319,   59,   60,   41,   62,   43,   44,   45,
  227,   41,   41,   38,   44,   44,   41,   41,  257,   44,
   44,   65,   41,   59,   60,   44,   62,   40,   76,  249,
   93,   94,   45,   58,   59,   57,  189,   93,   63,  286,
   67,  238,   26,  427,  314,  315,  316,  317,  318,  319,
  375,  175,   91,  177,   -1,   41,   -1,   93,   44,   -1,
   -1,  124,  125,   41,   -1,   -1,   44,   -1,   93,   94,
   40,   -1,   58,   59,   -1,   45,   -1,   63,   -1,   -1,
   58,   59,   -1,   -1,  314,  315,  316,  317,  318,  319,
   -1,   -1,  314,  315,  316,  317,  318,  319,   -1,  124,
  125,  314,  315,  316,  317,  318,  319,   93,   94,   40,
  123,   -1,  125,   -1,   45,   93,   -1,   -1,   41,   -1,
   -1,   44,   -1,   42,   43,   -1,   45,   -1,   47,  314,
  315,  316,  317,  318,  319,   58,   59,   40,  124,  125,
   63,   41,   45,   41,   44,   -1,   44,  125,   -1,   -1,
   -1,   41,   -1,  123,   44,  125,   -1,   -1,   58,   59,
   58,   59,   -1,   63,   41,   63,   -1,   44,   58,   59,
   93,   94,   40,   63,   93,   42,   43,   45,   45,   -1,
   47,   58,   59,  314,  315,   -1,   63,  318,  319,   -1,
   -1,   -1,  123,   93,  125,   93,   -1,   -1,   -1,   -1,
   -1,  124,  125,   93,  314,  315,  316,  317,  318,  319,
   -1,   -1,   -1,   -1,   41,   -1,   93,   44,   -1,   -1,
  123,   -1,  125,   -1,  124,  125,  124,  125,   -1,   -1,
   -1,   58,   59,   -1,   -1,  125,   63,   41,   42,   43,
   44,   45,   -1,   47,  257,  258,   -1,   -1,  125,  262,
  263,  314,  315,   -1,   41,  123,   -1,   44,  314,  315,
  316,  317,  318,  319,   -1,   -1,   93,   40,   41,   42,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  314,  315,
  316,  317,  318,  319,   -1,   58,   59,  257,  258,  314,
  315,  304,  262,  263,  307,   -1,  309,   -1,  125,   -1,
  313,   40,   41,   42,   33,   44,   93,   42,   43,   38,
   45,   40,   47,   42,   43,   -1,   45,   -1,   91,   -1,
   59,   -1,   -1,   -1,   -1,   -1,  257,  258,  314,  315,
   -1,  262,  263,   -1,  304,   -1,   -1,  307,  125,  309,
   -1,   -1,   -1,  313,   41,   42,   43,   44,   45,   -1,
   47,   -1,   91,   -1,  257,  258,   -1,   -1,   93,  262,
  263,   -1,   40,   41,   42,   33,   44,   -1,   -1,   -1,
   38,   -1,   40,  304,   42,   43,  307,   45,  309,   -1,
   58,   59,  313,  164,  165,  166,   -1,   -1,   -1,  257,
  258,  314,  315,   -1,  262,  263,   -1,  126,   -1,   -1,
   -1,  304,   -1,   -1,  307,   -1,  309,   -1,   -1,   -1,
  313,   -1,   -1,   91,  314,  315,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,
   -1,   40,   41,   42,   -1,   44,  304,  314,  315,  307,
   -1,  309,   40,   41,   42,  313,   44,   -1,   -1,   58,
   59,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   59,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,  255,  256,  257,  258,  259,  260,
   59,  262,   91,   -1,  257,  266,  267,  314,   -1,  270,
   40,   41,   42,   91,   -1,   33,  277,  278,  279,  280,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   41,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,  257,   -1,
   -1,   40,   41,   42,   -1,   -1,   -1,  314,  257,  258,
  259,  260,   -1,  262,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   91,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   91,  354,  355,  356,  357,  358,  359,  257,
   -1,  362,   -1,   -1,  365,  123,   -1,  125,  126,  257,
  258,  259,  260,   -1,  262,  263,   -1,   -1,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   33,  405,   -1,   -1,   -1,   38,   -1,
   40,   61,   42,   43,   -1,   45,  417,  418,  419,  420,
  421,  422,  423,  424,   -1,   -1,  427,  428,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,  257,
   -1,   91,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   33,   -1,   41,   42,   43,   38,   45,   40,
   47,   42,   43,   -1,   45,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,  126,   -1,   41,  257,
  258,  259,  260,   -1,  262,  263,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,   -1,   93,   -1,   -1,   -1,   -1,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   33,   -1,   -1,  126,   61,   38,   -1,   40,
   -1,   42,   43,   33,   45,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   43,   -1,   45,   -1,   -1,   41,   -1,
   -1,   44,   40,   41,   42,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   58,   59,  262,  263,   -1,   -1,  266,  267,   41,  269,
  270,   44,   93,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,  262,  263,   -1,   58,   59,   -1,   61,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  283,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,  292,  293,   -1,   -1,  126,   -1,   -1,   -1,
  123,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  257,  258,  259,  260,
  123,  262,  263,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   -1,  279,   -1,
   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,  293,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,   33,   -1,
   -1,   91,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,   -1,   -1,   -1,   -1,   75,  257,  258,  259,  260,
   61,  262,  263,  123,   -1,  125,  126,  257,  258,  259,
  260,   -1,  262,  263,   -1,   -1,   -1,   -1,  279,  257,
   -1,   -1,  283,  103,   -1,   -1,   -1,   -1,   93,   -1,
   -1,  292,  293,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  138,   -1,
   -1,  126,  123,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,   -1,   33,
   -1,   -1,   -1,   -1,   38,  175,   40,  177,   42,   43,
   -1,   45,   46,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   33,   42,   43,   -1,   45,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
  210,   -1,   -1,   -1,   40,   -1,   -1,  257,  258,  259,
  260,   -1,  262,  263,   -1,   -1,   -1,   91,  228,   -1,
  230,   33,   58,   -1,   -1,   61,   38,   -1,   40,  239,
   42,   43,  242,   45,   -1,   -1,   33,   56,   -1,   -1,
   -1,   38,   -1,   40,   93,   42,   43,   -1,   45,  123,
   -1,   -1,  126,   -1,   -1,   91,   -1,   76,   77,   78,
   79,   40,  257,  258,  259,  260,  123,  262,  263,  126,
   -1,   33,   -1,   -1,   -1,  285,   38,  126,   40,   -1,
   42,   43,   61,   45,  103,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
   -1,   -1,   91,   -1,  126,   -1,   -1,   -1,   -1,   -1,
  139,  331,   -1,   33,   -1,   -1,   -1,   -1,   38,  126,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,  123,   -1,   -1,   -1,  175,   -1,  177,   -1,
   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   26,   -1,   -1,   29,   30,   31,
   32,   -1,   -1,  257,  258,  259,  260,   -1,  262,  263,
   -1,   -1,   -1,   -1,   -1,   47,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  125,  262,  263,   42,  257,  258,
  259,  260,   -1,  262,  263,   67,  126,   -1,   -1,   71,
   -1,   56,   -1,   -1,   -1,   -1,  262,  263,   63,   -1,
  266,  267,   -1,  269,  270,   -1,   -1,   -1,   -1,   91,
   75,   76,   77,   78,   79,  257,  258,  259,  260,  125,
  262,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,  262,  263,   -1,  103,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,  263,   -1,   -1,  266,  267,   -1,
  269,  270,   -1,   -1,   -1,  257,  258,  259,  260,  134,
  262,  263,   -1,  138,  139,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  175,   -1,  177,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,  262,  263,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   -1,   -1,   -1,  239,   -1,   -1,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,
};
#define YYFINAL 26
#ifndef YYDEBUG
#define YYDEBUG 1
#endif
#define YYMAXTOKEN 322
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENTIFIER",
"CONSTANT","STRING_LITERAL","SIZEOF","PTR_OP","INC_OP","DEC_OP","LEFT_OP",
"RIGHT_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN",
"LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME",
"TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","INLINE","RESTRICT","CHAR",
"SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE",
"VOID","BOOL","COMPLEX","IMAGINARY","STRUCT","UNION","ENUM","ELLIPSIS","CASE",
"DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK",
"RETURN","OR_OP","AND_OP","LE_OP","GE_OP","EQ_OP","NE_OP","NEGATION","__TRUE",
"__FALSE",
};
char *yyrule[] = {
"$accept : translation_unit",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : '(' expression ')'",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' shift_expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"postfix_expression : postfix_expression '.' IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"postfix_expression : '(' type_name ')' '{' initializer_list '}'",
"postfix_expression : '(' type_name ')' '{' initializer_list ',' '}'",
"argument_expression_list : shift_expression",
"argument_expression_list : argument_expression_list ',' shift_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF '(' type_name ')'",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression '&' equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression '^' and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression '?' expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression ',' assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers ';'",
"declaration : declaration_specifiers init_declarator_list ';'",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : type_qualifier",
"declaration_specifiers : type_qualifier declaration_specifiers",
"declaration_specifiers : function_specifier",
"declaration_specifiers : function_specifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : EXTERN",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : BOOL",
"type_specifier : COMPLEX",
"type_specifier : IMAGINARY",
"type_specifier : struct_or_union_specifier",
"type_specifier : enum_specifier",
"type_specifier : TYPE_NAME",
"struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union IDENTIFIER",
"struct_or_union_specifier : struct_or_union TYPE_NAME",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list ';'",
"struct_declaration : specifier_qualifier_list ';'",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : type_qualifier specifier_qualifier_list",
"specifier_qualifier_list : type_qualifier",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list ',' struct_declarator",
"struct_declarator : declarator",
"struct_declarator : ':' constant_expression",
"struct_declarator : declarator ':' constant_expression",
"enum_specifier : ENUM '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list '}'",
"enum_specifier : ENUM '{' enumerator_list ',' '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list ',' '}'",
"enum_specifier : ENUM IDENTIFIER",
"enumerator_list : enumerator",
"enumerator_list : enumerator_list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant_expression",
"type_qualifier : CONST",
"type_qualifier : RESTRICT",
"type_qualifier : VOLATILE",
"function_specifier : INLINE",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' type_qualifier_list assignment_expression ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list ']'",
"direct_declarator : direct_declarator '[' assignment_expression ']'",
"direct_declarator : direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'",
"direct_declarator : direct_declarator '[' type_qualifier_list '*' ']'",
"direct_declarator : direct_declarator '[' '*' ']'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '(' parameter_type_list ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type_qualifier_list",
"pointer : '*' pointer",
"pointer : '*' type_qualifier_list pointer",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list ',' ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : '(' abstract_declarator ')'",
"direct_abstract_declarator : '[' ']'",
"direct_abstract_declarator : '[' assignment_expression ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' assignment_expression ']'",
"direct_abstract_declarator : '[' '*' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' '*' ']'",
"direct_abstract_declarator : '(' ')'",
"direct_abstract_declarator : '(' parameter_type_list ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' parameter_type_list ')'",
"initializer : assignment_expression",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer_list : initializer",
"initializer_list : designation initializer",
"initializer_list : initializer_list ',' initializer",
"initializer_list : initializer_list ',' designation initializer",
"designation : designator_list '='",
"designator_list : designator",
"designator_list : designator_list designator",
"designator : '[' constant_expression ']'",
"designator : '.' IDENTIFIER",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : IDENTIFIER ':' statement",
"labeled_statement : CASE constant_expression ':' statement",
"labeled_statement : DEFAULT ':' statement",
"compound_statement : '{' '}'",
"compound_statement : '{' block_item_list '}'",
"block_item_list : block_item",
"block_item_list : block_item_list block_item",
"block_item : declaration",
"block_item : statement",
"expression_statement : ';'",
"expression_statement : expression ';'",
"selection_statement : IF '(' expression ')' statement",
"selection_statement : IF '(' expression ')' statement ELSE statement",
"selection_statement : SWITCH '(' expression ')' statement",
"iteration_statement : WHILE '(' expression ')' statement",
"iteration_statement : DO statement WHILE '(' expression ')' ';'",
"iteration_statement : FOR '(' expression_statement expression_statement ')' statement",
"iteration_statement : FOR '(' expression_statement expression_statement expression ')' statement",
"iteration_statement : FOR '(' declaration expression_statement ')' statement",
"iteration_statement : FOR '(' declaration expression_statement expression ')' statement",
"jump_statement : GOTO IDENTIFIER ';'",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expression ';'",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : __program",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"__expression : __expression '+' __expression",
"__expression : __expression '-' __expression",
"__expression : __expression '*' __expression",
"__expression : __expression '/' __expression",
"__expression : '-' __expression",
"__expression : '(' __expression ')'",
"__expression : IDENTIFIER '(' __expression_list ')'",
"__expression : IDENTIFIER '(' ')'",
"__expression : IDENTIFIER __array_index",
"__expression : IDENTIFIER",
"__expression : CONSTANT",
"__expression_list : __expression",
"__expression_list : __expression_list ',' __expression",
"__array_index : '[' __expression ']'",
"__array_index : __array_index '[' __expression ']'",
"__inequation : __expression EQ_OP __expression",
"__inequation : __expression GE_OP __expression",
"__inequation : __expression LE_OP __expression",
"__inequation : __expression '<' __expression",
"__inequation : __expression '>' __expression",
"__inequation : __expression NE_OP __expression",
"__inequation : __TRUE",
"__inequation : __FALSE",
"__condition : __inequation",
"__condition : __condition OR_OP __condition",
"__condition : __condition AND_OP __condition",
"__condition : '!' __condition",
"__condition : '(' __condition ')'",
"__condition : __expression",
"__assignment : __expression",
"__assignment : RETURN __expression",
"__assignment : IDENTIFIER '=' __expression",
"__assignment : IDENTIFIER ADD_ASSIGN __expression",
"__assignment : IDENTIFIER SUB_ASSIGN __expression",
"__assignment : IDENTIFIER DIV_ASSIGN __expression",
"__assignment : IDENTIFIER MUL_ASSIGN __expression",
"__assignment : IDENTIFIER INC_OP",
"__assignment : INC_OP IDENTIFIER",
"__assignment : IDENTIFIER DEC_OP",
"__assignment : DEC_OP IDENTIFIER",
"__assignment : IDENTIFIER __array_index ADD_ASSIGN __expression",
"__assignment : IDENTIFIER __array_index SUB_ASSIGN __expression",
"__assignment : IDENTIFIER __array_index DIV_ASSIGN __expression",
"__assignment : IDENTIFIER __array_index MUL_ASSIGN __expression",
"__assignment : IDENTIFIER __array_index INC_OP",
"__assignment : IDENTIFIER __array_index DEC_OP",
"__assignment : DEC_OP IDENTIFIER __array_index",
"__assignment : INC_OP IDENTIFIER __array_index",
"__assignment : IDENTIFIER __array_index '=' __expression",
"__assignment : '(' __lhs_plus ')' '=' __expression",
"__lhs_plus : __lhs_plus ',' __simple_lhs",
"__lhs_plus : __simple_lhs",
"__simple_lhs : IDENTIFIER __array_index",
"__simple_lhs : IDENTIFIER",
"__statement : IDENTIFIER ':' __assignment ';'",
"__statement : __assignment ';'",
"__statement : __if_stmt",
"__statement : __while_stmt",
"__statement : __for_stmt",
"__statement : __block",
"__if_stmt : IF '(' __condition ')' __statement __else_part",
"__else_part :",
"__else_part : ELSE __statement",
"__while_stmt : WHILE '(' __condition ')' __statement",
"__for_stmt : FOR '(' __assignment ';' __inequation ';' __assignment ')' __statement",
"__block : '{' declaration_list __statements '}'",
"__block : '{' __statements '}'",
"__statements :",
"__statements : __statements __statement",
"__program : declaration_specifiers declarator declaration_list __block",
"__program : declaration_specifiers declarator __block",
};
#endif
#if YYDEBUG
#include <stdio.h>
#endif

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH  500
#endif
#endif

#define YYINITSTACKSIZE 500

int      yydebug;
int      yynerrs;
int      yyerrflag;
int      yychar;
short   *yyssp;
YYSTYPE *yyvsp;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* variables for the parser stack */
static short   *yyss;
static short   *yysslim;
static YYSTYPE *yyvs;
static int      yystacksize;
#line 1281 "ADaAn_Parser.y"
#include <stdio.h>

// extern char yytext[];
extern int column;

// void   yyerror(char *s)
// {
//    fflush(stdout);
//    printf("\n%*s\n%*s\n", column, "^", column, s);
// }

 //#define YYDEBUG 1
//extern int yydebug;

bool   
Parse_Program(char* filename, Program* adaan_prog)
{
//yydebug=1;
 
parser_line=1;
parser_col=1;
__prog=adaan_prog;

nb_while_loops=0;
InitTypes();
fct=&IsDefinedType;
yyin=fopen(filename,"r");
yyparse();
fclose(yyin);
return syntaxic_error;
};

  
#line 1312 "ADaAn_Parser.cc"
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(void)
{
    int newsize, i;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = yystacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = yyssp - yyss;
    newss = (yyss != 0)
          ? (short *)realloc(yyss, newsize * sizeof(*newss))
          : (short *)malloc(newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    yyss  = newss;
    yyssp = newss + i;
    newvs = (yyvs != 0)
          ? (YYSTYPE *)realloc(yyvs, newsize * sizeof(*newvs))
          : (YYSTYPE *)malloc(newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    yyvs = newvs;
    yyvsp = newvs + i;
    yystacksize = newsize;
    yysslim = yyss + newsize - 1;
    return 0;
}

#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(void)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;

    if (yyss == NULL && yygrowstack()) goto yyoverflow;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim && yygrowstack())
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    yyerror("syntax error");

#ifdef lint
    goto yyerrlab;
#endif

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim && yygrowstack())
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yyvsp[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 78:
#line 262 "ADaAn_Parser.y"
{

                        if(yyvsp[-2].info.__Value==-100){
                             
                             vector<string>* vect=(vector<string>*)yyvsp[-1].info.__generic;
                           for(vector<string>::iterator it=vect->begin(); it != vect->end(); ++it){
                           
                              AddType(*it);
                           
                              }
                           
                             }
                         
                          }
break;
case 79:
#line 279 "ADaAn_Parser.y"
{yyval.info.__Value=yyvsp[0].info.__Value;}
break;
case 80:
#line 280 "ADaAn_Parser.y"
{
                        if(yyvsp[-1].info.__Value==-100 || yyvsp[0].info.__Value==-100 )
                             yyval.info.__Value==-100;
                        else
                             yyval.info.__Value==-10;
                        }
break;
case 81:
#line 286 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 82:
#line 287 "ADaAn_Parser.y"
{yyval.info.__Value=yyvsp[0].info.__Value;}
break;
case 83:
#line 288 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 84:
#line 289 "ADaAn_Parser.y"
{yyval.info.__Value=yyvsp[0].info.__Value;}
break;
case 85:
#line 290 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 86:
#line 291 "ADaAn_Parser.y"
{yyval.info.__Value=yyvsp[0].info.__Value;}
break;
case 87:
#line 295 "ADaAn_Parser.y"
{vector<string>* vect=(vector<string>*)yyvsp[0].info.__generic;
                     
                          yyval.info.__generic=vect;
                       }
break;
case 88:
#line 299 "ADaAn_Parser.y"
{
                     
                     vector<string>* vect=(vector<string>*)yyvsp[-2].info.__generic;
                     vector<string>* vect2=(vector<string>*)yyvsp[0].info.__generic;

                     for(vector<string>::iterator it=vect2->begin(); it != vect2->end(); ++it)
                           vect->push_back(*it);
                     yyval.info.__generic=(void*)vect;

                     }
break;
case 91:
#line 317 "ADaAn_Parser.y"
{yyval.info.__Value=-100;}
break;
case 92:
#line 318 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 93:
#line 319 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 94:
#line 320 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 95:
#line 321 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 96:
#line 325 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 97:
#line 326 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 98:
#line 327 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 99:
#line 328 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 100:
#line 329 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 101:
#line 330 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 102:
#line 331 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 103:
#line 332 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 104:
#line 333 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 105:
#line 334 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 106:
#line 335 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 107:
#line 336 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 108:
#line 337 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 109:
#line 338 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 110:
#line 339 "ADaAn_Parser.y"
{yyval.info.__Value=-10;}
break;
case 143:
#line 411 "ADaAn_Parser.y"
{    yyval.info.__generic=yyvsp[0].info.__generic; strcpy(yyval.info.__ID,yyvsp[0].info.__ID);}
break;
case 144:
#line 412 "ADaAn_Parser.y"
{    yyval.info.__generic=yyvsp[0].info.__generic; strcpy(yyval.info.__ID,yyvsp[0].info.__ID);}
break;
case 145:
#line 417 "ADaAn_Parser.y"
{
                vector<string>* vect=new vector<string>();
                vect->push_back((char*)yyvsp[0].info.__ID);
                 yyval.info.__generic=vect;
                 yyval.info.__Value=10;
                 strcpy(yyval.info.__ID,yyvsp[0].info.__ID);

                 }
break;
case 146:
#line 425 "ADaAn_Parser.y"
{  
                  yyval.info.__Value=100;
                 yyval.info.__generic=yyvsp[-1].info.__generic;
                 }
break;
case 155:
#line 437 "ADaAn_Parser.y"
{strcpy(yyval.info.__ID,yyvsp[-3].info.__ID);}
break;
case 156:
#line 438 "ADaAn_Parser.y"
{strcpy(yyval.info.__ID,yyvsp[-3].info.__ID);}
break;
case 157:
#line 439 "ADaAn_Parser.y"
{strcpy(yyval.info.__ID,yyvsp[-2].info.__ID);}
break;
case 240:
#line 617 "ADaAn_Parser.y"
{
         Expression* a_e=new Expression ((Expression*)yyvsp[-2].info.__generic,FADA_ADD,(Expression*) yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 241:
#line 623 "ADaAn_Parser.y"
{ 
         Expression* a_e=new Expression ((Expression*)yyvsp[-2].info.__generic,FADA_SUB,(Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 242:
#line 629 "ADaAn_Parser.y"
{
         Expression* a_e=new Expression ((Expression*)yyvsp[-2].info.__generic,FADA_MUL,(Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 243:
#line 635 "ADaAn_Parser.y"
{ 
         Expression* a_e=new Expression ((Expression*)yyvsp[-2].info.__generic,FADA_DIV,(Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 244:
#line 641 "ADaAn_Parser.y"
{ 
         Expression* a_e=new Expression (new Expression (-1),FADA_MUL,(Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 245:
#line 647 "ADaAn_Parser.y"
{ 
         yyval.info.__generic=yyvsp[-1].info.__generic;
         }
break;
case 246:
#line 652 "ADaAn_Parser.y"
{
         Expression* a_e=new  Expression(FADA_function, (char*)yyvsp[-3].info.__ID ,((vector<Expression* > *) yyvsp[-1].info.__generic));
         yyval.info.__generic=(void*)a_e;
         }
break;
case 247:
#line 658 "ADaAn_Parser.y"
{
         vector<Expression* > empty;
         Expression* a_e=new  Expression(FADA_function, (char*)yyvsp[-2].info.__ID ,&empty);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 248:
#line 665 "ADaAn_Parser.y"
{
         Expression* a_e=new Expression(FADA_array,(char*) yyvsp[-1].info.__ID ,((vector<Expression*>*)yyvsp[0].info.__generic));
         yyval.info.__generic=(void*)a_e;
         }
break;
case 249:
#line 672 "ADaAn_Parser.y"
{
         Expression* a_e=new Expression(yyvsp[0].info.__ID);
         yyval.info.__generic=(void*)a_e;
         }
break;
case 250:
#line 678 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Expression* a_e=new Expression(yyvsp[0].info.__Value);
         yyval.info.__generic=(void*)a_e;
         /*adaan end*/
         }
break;
case 251:
#line 690 "ADaAn_Parser.y"
{
         /*adaan begin*/
         vector<Expression*>   *a_index;
         a_index= new vector<Expression*>;
         a_index->push_back((Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_index;
         /*adaan end*/
         }
break;
case 252:
#line 700 "ADaAn_Parser.y"
{
         /*adaan begin*/
         vector<Expression*>   *a_index;
         a_index= (vector<Expression*>*)yyvsp[-2].info.__generic;
         a_index->push_back((Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_index;
         /*adaan end*/
         }
break;
case 253:
#line 711 "ADaAn_Parser.y"
{
         vector<Expression*>   *a_index;
         a_index= new vector<Expression*>;
         a_index->push_back((Expression*)yyvsp[-1].info.__generic);
         yyval.info.__generic=(void*)a_index;
         }
break;
case 254:
#line 718 "ADaAn_Parser.y"
{
         vector<Expression*>   *a_index;
         a_index= (vector<Expression*>*)yyvsp[-3].info.__generic;
         a_index->push_back((Expression*)yyvsp[-1].info.__generic);
         yyval.info.__generic=(void*)a_index;
         }
break;
case 255:
#line 730 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_EQ, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         /*adaan end*/
         }
break;
case 256:
#line 738 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_GREATER_EQ, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         /*adaan end*/
         }
break;
case 257:
#line 746 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_LESS_EQ, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         /*adaan end*/

         }
break;
case 258:
#line 755 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_LESS, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         /*adaan end*/

         }
break;
case 259:
#line 764 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_GREATER, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         /*adaan end*/
         }
break;
case 260:
#line 771 "ADaAn_Parser.y"
{
         Inequation*   a_ineq=new Inequation((Expression*)yyvsp[-2].info.__generic, FADA_NEQ, (Expression*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_ineq;
         }
break;
case 261:
#line 776 "ADaAn_Parser.y"
{
         Inequation* a_ineq=new Inequation(true); 
         yyval.info.__generic=(void*)a_ineq;
         }
break;
case 262:
#line 781 "ADaAn_Parser.y"
{
         Inequation* a_ineq=new Inequation(false); 
         yyval.info.__generic=(void*)a_ineq;
         }
break;
case 263:
#line 800 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Condition* a_cond=new Condition((Inequation*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_cond;
         /*adaan end*/
         }
break;
case 264:
#line 808 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Condition* a_cond=new Condition((Condition*)yyvsp[-2].info.__generic,FADA_OR,  (Condition*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_cond;
         /*adaan end*/
         }
break;
case 265:
#line 816 "ADaAn_Parser.y"
{
         /*adaan begin*/
         Condition* a_cond=new Condition( (Condition*)yyvsp[-2].info.__generic,FADA_AND, (Condition*)yyvsp[0].info.__generic);
         yyval.info.__generic=(void*)a_cond;
         /*adaan end*/

         }
break;
case 266:
#line 825 "ADaAn_Parser.y"
{ 
         Condition* a_cond=((Condition*)yyvsp[-1].info.__generic)->FastNegation();
         yyval.info.__generic=(void*)a_cond;
          }
break;
case 267:
#line 831 "ADaAn_Parser.y"
{
         /*adaan begin*/
         yyval.info.__generic=yyvsp[-1].info.__generic;
         /*adaan end*/
         }
break;
case 268:
#line 836 "ADaAn_Parser.y"
{
         Inequation* a_ineq=new Inequation((Expression*)yyvsp[0].info.__generic, FADA_NEQ, new Expression(0));
         Condition* a_cond=new Condition(a_ineq);
         yyval.info.__generic=(void*)a_cond;
         }
break;
case 269:
#line 849 "ADaAn_Parser.y"
{
         
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)"" ,__lhs_index, (Expression*) yyvsp[0].info.__generic);   
         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 270:
#line 857 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Expression* __return=new Expression("return");
         __return->AddArgument((Expression*) yyvsp[0].info.__generic);
         Assignment* assign= new Assignment((char*)"" ,__lhs_index, __return );   
         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
                }
break;
case 271:
#line 867 "ADaAn_Parser.y"
{
         /*adaan begin*/
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, (Expression*) yyvsp[0].info.__generic);
         
         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         /*adaan end*/
         }
break;
case 272:
#line 878 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-2].info.__ID), FADA_ADD, (Expression*) yyvsp[0].info.__generic));


         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
                  }
break;
case 273:
#line 889 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-2].info.__ID), FADA_SUB, (Expression*) yyvsp[0].info.__generic));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 274:
#line 899 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-2].info.__ID), FADA_DIV, (Expression*) yyvsp[0].info.__generic));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 275:
#line 909 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-2].info.__ID), FADA_MUL, (Expression*) yyvsp[0].info.__generic));
         }
break;
case 276:
#line 916 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-1].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-1].info.__ID), FADA_ADD, new Expression (1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 277:
#line 927 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[0].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[0].info.__ID), FADA_ADD, new Expression (1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 278:
#line 937 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[-1].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[-1].info.__ID), FADA_SUB, new Expression (1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;

         }
break;
case 279:
#line 948 "ADaAn_Parser.y"
{
         vector<Expression*>*   __index= new vector<Expression*>;
         FADA_Index*   __lhs_index= new FADA_Index(__index);
         Assignment* assign= new Assignment((char*)yyvsp[0].info.__ID ,__lhs_index, new Expression (new Expression ((char*)yyvsp[0].info.__ID), FADA_SUB, new Expression (1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;

         }
break;
case 280:
#line 960 "ADaAn_Parser.y"
{

         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-2].info.__generic);
         Assignment* assign= new Assignment((char*)yyvsp[-3].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-3].info.__ID,(vector<Expression*>*) yyvsp[-2].info.__generic ), FADA_ADD, (Expression*) yyvsp[0].info.__generic));
         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 281:
#line 969 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-2].info.__generic);
         Assignment* assign= new Assignment((char*)yyvsp[-3].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-3].info.__ID,(vector<Expression*>*) yyvsp[-2].info.__generic ), FADA_SUB, (Expression*) yyvsp[0].info.__generic));
         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 282:
#line 977 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-2].info.__generic);
         Assignment* assign= new Assignment((char*)yyvsp[-3].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-3].info.__ID,(vector<Expression*>*) yyvsp[-2].info.__generic ), FADA_DIV, (Expression*) yyvsp[0].info.__generic));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 283:
#line 986 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-2].info.__generic);
         Assignment* assign= new Assignment((char*)yyvsp[-3].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-3].info.__ID,(vector<Expression*>*) yyvsp[-2].info.__generic ), FADA_MUL, (Expression*) yyvsp[0].info.__generic));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 284:
#line 995 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-1].info.__generic);
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-2].info.__ID,(vector<Expression*>*) yyvsp[-1].info.__generic ), FADA_ADD, new Expression(1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;

         }
break;
case 285:
#line 1005 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-1].info.__generic);
         
         Assignment* assign= new Assignment((char*)yyvsp[-2].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-2].info.__ID,(vector<Expression*>*) yyvsp[-1].info.__generic ), FADA_SUB, new Expression(1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 286:
#line 1015 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[0].info.__generic);
         
         Assignment* assign= new Assignment((char*)yyvsp[-1].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-1].info.__ID,(vector<Expression*>*) yyvsp[0].info.__generic ), FADA_SUB, new Expression(1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 287:
#line 1025 "ADaAn_Parser.y"
{
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[0].info.__generic);
         
         Assignment* assign= new Assignment((char*)yyvsp[-1].info.__ID ,__lhs_index, new Expression(new Expression(FADA_array,(char*)yyvsp[-1].info.__ID,(vector<Expression*>*) yyvsp[0].info.__generic ), FADA_ADD, new Expression(1)));

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 288:
#line 1036 "ADaAn_Parser.y"
{
      
         FADA_Index*   __lhs_index= new FADA_Index((vector<Expression*>*) yyvsp[-2].info.__generic);

         Assignment* assign= new Assignment((char*)yyvsp[-3].info.__ID,__lhs_index, (Expression*) yyvsp[0].info.__generic);


         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         }
break;
case 289:
#line 1047 "ADaAn_Parser.y"
{
         vector<Expression*>*v=(vector<Expression*>*)yyvsp[-3].info.__generic;
         vector<Expression*>::iterator it=v->begin();
         if(it==v->end()){
            cout<<"\n LHS_PLUS .... FADA (Parsing) ERROR \n";
            exit(EXIT_FAILURE);
            }   

         Assignment* assign= new Assignment((*it)->GetVariableName(),new FADA_Index((*it)->GetIndex()), (Expression*) yyvsp[0].info.__generic);

         for(++it;it!=v->end();++it)
            assign->Add_LHS_PLUS((*it)->GetVariableName(),new FADA_Index((*it)->GetIndex()));
            

         Statement*   stmt= new Statement (assign);
         yyval.info.__generic=(void*)stmt;
         
         }
break;
case 290:
#line 1071 "ADaAn_Parser.y"
{
      vector<Expression*>*v=(vector<Expression*>*)yyvsp[-2].info.__generic; 
      Expression *e=((Expression*)yyvsp[0].info.__generic); 
      v->push_back (e);
      yyval.info.__generic=(void*)v;
      }
break;
case 291:
#line 1079 "ADaAn_Parser.y"
{
      vector<Expression*>* v=new vector<Expression*>();
      v->push_back((Expression*)yyvsp[0].info.__generic);

      yyval.info.__generic=(void*)v;
      }
break;
case 292:
#line 1088 "ADaAn_Parser.y"
{
      Expression* e=new Expression(FADA_array,(char*)yyvsp[-1].info.__ID, ((FADA_Index*) yyvsp[0].info.__generic)->GetIndex());
      yyval.info.__generic=(void*)e;
      }
break;
case 293:
#line 1094 "ADaAn_Parser.y"
{
      Expression*e=new Expression((char*)yyvsp[0].info.__ID);
      yyval.info.__generic=(void*)e;
      
      }
break;
case 294:
#line 1106 "ADaAn_Parser.y"
{
               ((Statement*)(yyvsp[-1].info.__generic))->GetAssignment()->SetLabel(yyvsp[-3].info.__ID);
               vector<Statement*>* result=new vector<Statement*>();
               result->push_back(((Statement*)(yyvsp[-1].info.__generic)));
               yyval.info.__generic=(void*) result;
               }
break;
case 295:
#line 1114 "ADaAn_Parser.y"
{
               vector<Statement*>* result=new vector<Statement*>();
               result->push_back(((Statement*)(yyvsp[-1].info.__generic)));
               yyval.info.__generic=(void*) result;
               }
break;
case 296:
#line 1119 "ADaAn_Parser.y"
{
               vector<Statement*>* result=new vector<Statement*>();
               result->push_back(((Statement*)(yyvsp[0].info.__generic)));
               yyval.info.__generic=(void*) result;

               }
break;
case 297:
#line 1125 "ADaAn_Parser.y"
{
               vector<Statement*>* result=new vector<Statement*>();
               result->push_back(((Statement*)(yyvsp[0].info.__generic)));
               yyval.info.__generic=(void*) result;
               }
break;
case 298:
#line 1130 "ADaAn_Parser.y"
{
               vector<Statement*>* result=new vector<Statement*>();
               result->push_back(((Statement*)(yyvsp[0].info.__generic)));
               yyval.info.__generic=(void*) result;
               }
break;
case 299:
#line 1135 "ADaAn_Parser.y"
{
               yyval.info.__generic=yyvsp[0].info.__generic;
               }
break;
case 300:
#line 1142 "ADaAn_Parser.y"
{
            vector<Statement*>* enclosed=(vector<Statement*>*)yyvsp[-1].info.__generic;
            vector<Statement*>* enclosed_by_else=(vector<Statement*>*)yyvsp[0].info.__generic;
            Condition* if_condition=(Condition*) yyvsp[-3].info.__generic;
            Control* res;
            res=new Control(if_condition);

            Statement* result;
            if(enclosed_by_else==NULL){

               result=new Statement(res,enclosed);
               }
            else
               {

               result=new Statement(res,enclosed, enclosed_by_else);
               }
            yyval.info.__generic=(void*)result;
            }
break;
case 301:
#line 1163 "ADaAn_Parser.y"
{yyval.info.__generic=(void*)NULL;}
break;
case 302:
#line 1164 "ADaAn_Parser.y"
{
            yyval.info.__generic=yyvsp[0].info.__generic;
            }
break;
case 303:
#line 1174 "ADaAn_Parser.y"
{
      vector<Statement*>* enclosed=(vector<Statement*>*)yyvsp[0].info.__generic;
      Condition* while_condition=(Condition*) yyvsp[-2].info.__generic;
      ostringstream oss;
      oss<<"W_"<<nb_while_loops++;
      string loop_counter=oss.str();
      Statement* res=new Statement(
               new Control(loop_counter,while_condition), enclosed);
      yyval.info.__generic=(void*)res;
      }
break;
case 304:
#line 1190 "ADaAn_Parser.y"
{
      Control*   __st;

      Assignment* __init=((Statement*)yyvsp[-6].info.__generic)->GetAssignment();
      Assignment* __inc=((Statement*)yyvsp[-2].info.__generic)->GetAssignment();
      Inequation* __ub=(Inequation*)yyvsp[-4].info.__generic;
      string __lc;
      
      if(__init->IsScalarInitialization(&__lc)){
         if(__inc->IsInc(__lc)){
            Expression* upper_bound=__ub->UpperBound(__lc);
            if(upper_bound!=NULL)
               __st=new Control(__lc,__init->GetRHSExpression(),upper_bound);
               
            else{
               printf("\n Parser FATAL ERROR(for loop : BAD Upper Bound ...)\n");
               exit(0);
               }
            }
         else{
            printf("\n Parser FATAL ERROR(for loop : bad incrementation ...)\n");
            exit(0);
            }
         }
      else{
         printf("\n Parser FATAL ERROR(for loop : BAD initialization ...)\n");
         exit(0);
         }

      vector<Statement*>* enclosed=(vector<Statement*>*)yyvsp[0].info.__generic;
      
      Statement* res=new Statement(__st,enclosed);
      yyval.info.__generic=(void*)res;
      }
break;
case 305:
#line 1230 "ADaAn_Parser.y"
{
                     yyval.info.__generic=yyvsp[-1].info.__generic;
                     }
break;
case 306:
#line 1233 "ADaAn_Parser.y"
{
                     yyval.info.__generic=yyvsp[-1].info.__generic;
                     }
break;
case 307:
#line 1242 "ADaAn_Parser.y"
{
                  yyval.info.__generic=new vector<Statement*>();
                  }
break;
case 308:
#line 1246 "ADaAn_Parser.y"
{
                  vector<Statement*>*   vect= (vector<Statement*>*) yyvsp[0].info.__generic;
                  vector<Statement*>*   result= (vector<Statement*>*) yyvsp[-1].info.__generic;
                  for(vector<Statement*>::iterator it=vect->begin(); it != vect->end(); ++it)
                     result->push_back(*it);
                  yyval.info.__generic=result;
                  }
break;
case 309:
#line 1264 "ADaAn_Parser.y"
{
                                 __prog->SetSyntaxTree(new Statement((vector<Statement*>*)yyvsp[0].info.__generic));
                                 __prog->SetLabel(yyvsp[-2].info.__ID);
                                 return 1;
                                 }
break;
case 310:
#line 1269 "ADaAn_Parser.y"
{
                                   __prog->SetLabel(yyvsp[-1].info.__ID);
                                 __prog->SetSyntaxTree(new Statement((vector<Statement*>*)yyvsp[0].info.__generic));
                                 
                                 
                                 return 1;
                                 }
break;
#line 2373 "ADaAn_Parser.cc"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim && yygrowstack())
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    return (1);

yyaccept:
    return (0);
}
